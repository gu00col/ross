#!/bin/bash

# Script de instala√ß√£o do ROSS - Analista Jur√≠dico
# Para ser executado dentro do container PHP
# S√≥ executa se vendor n√£o existir

echo "üîç Verificando se instala√ß√£o √© necess√°ria..."

# Verificar se vendor j√° existe
if [ -d "vendor" ]; then
    echo "‚úÖ Vendor j√° existe. Instala√ß√£o n√£o necess√°ria."
    echo "‚ÑπÔ∏è  Para reinstalar, remova a pasta vendor primeiro."
    exit 0
fi

echo "üöÄ Instalando ROSS - Analista Jur√≠dico no container PHP..."

# Verificar se o Composer est√° instalado
if ! command -v composer &> /dev/null; then
    echo "‚ùå Composer n√£o encontrado. Instalando..."
    curl -sS https://getcomposer.org/installer | php
    mv composer.phar /usr/local/bin/composer
    chmod +x /usr/local/bin/composer
    echo "‚úÖ Composer instalado com sucesso!"
else
    echo "‚úÖ Composer j√° est√° instalado!"
fi

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias do Composer..."
cd /var/www/html

# Verificar se composer.json existe
if [ ! -f "composer.json" ]; then
    echo "‚ùå Arquivo composer.json n√£o encontrado!"
    exit 1
fi

# Instalar depend√™ncias
if composer install --optimize-autoloader --no-dev; then
    echo "‚úÖ Depend√™ncias instaladas com sucesso!"
else
    echo "‚ùå Erro ao instalar depend√™ncias!"
    exit 1
fi

# Criar arquivo .env se n√£o existir
if [ ! -f .env ]; then
    echo "üìù Criando arquivo .env..."
    cp .env.example .env
    echo "‚úÖ Arquivo .env criado! Configure as vari√°veis de ambiente."
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p storage/{logs,cache,uploads}
mkdir -p app/Console/Commands
mkdir -p public_html/storage/{logs,cache,uploads}

# Definir permiss√µes
echo "üîê Definindo permiss√µes..."
chmod -R 755 /var/www/html/
chmod -R 777 /var/www/html/storage/
chmod -R 777 /var/www/html/public_html/storage/

# Instalar extens√µes PHP necess√°rias
echo "üîß Instalando extens√µes PHP necess√°rias..."
apt-get update
apt-get install -y libpq-dev
docker-php-ext-install pdo pdo_pgsql

# Habilitar mod_rewrite
echo "üîß Habilitando mod_rewrite..."
a2enmod rewrite

# Configurar Apache
echo "üîß Configurando Apache..."
cat > /etc/apache2/sites-available/000-default.conf << 'EOF'
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/public_html
    
    <Directory /var/www/html/public_html>
        AllowOverride All
        Require all granted
    </Directory>
    
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF

# Reiniciar Apache
echo "üîÑ Reiniciando Apache..."
service apache2 restart

# Verificar configura√ß√£o do PHP
echo "üîç Verificando configura√ß√£o do PHP..."
php -v

# Verificar extens√µes necess√°rias
echo "üîç Verificando extens√µes PHP necess√°rias..."
php -m | grep -E "(pdo|pgsql|curl|json|mbstring|openssl|zip)"

# Verificar conectividade com o banco de dados
echo "üîç Verificando conectividade com o banco de dados..."
if [ -f ".env" ]; then
    # Carregar vari√°veis do .env
    export $(grep -v '^#' .env | xargs)
    
    # Verificar se as vari√°veis de banco est√£o definidas
    if [ -n "$DB_HOST" ] && [ -n "$DB_DATABASE" ] && [ -n "$DB_USERNAME" ] && [ -n "$DB_PASSWORD" ]; then
        echo "üìä Testando conex√£o com PostgreSQL..."
        
        # Instalar cliente PostgreSQL para teste
        apt-get install -y postgresql-client
        
        # Testar conex√£o
        if PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_DATABASE" -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Conex√£o com banco de dados estabelecida!"
            
            # Verificar se as tabelas j√° existem
            TABLE_COUNT=$(PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_DATABASE" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' ')
            
            if [ "$TABLE_COUNT" -gt 0 ]; then
                echo "‚ÑπÔ∏è  Banco de dados j√° possui $TABLE_COUNT tabela(s). Migra√ß√µes n√£o ser√£o executadas automaticamente."
            else
                echo "‚ÑπÔ∏è  Banco de dados vazio. Migra√ß√µes podem ser executadas manualmente."
            fi
        else
            echo "‚ö†Ô∏è  N√£o foi poss√≠vel conectar ao banco de dados. Verifique as configura√ß√µes no .env"
        fi
    else
        echo "‚ö†Ô∏è  Vari√°veis de banco de dados n√£o configuradas no .env"
    fi
else
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Configure as vari√°veis de ambiente primeiro."
fi

echo "‚úÖ Instala√ß√£o conclu√≠da no container PHP!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Configure o arquivo .env com suas credenciais de banco"
echo "2. Execute as migra√ß√µes manualmente: docker exec -it php-apache composer run migrate"
echo "3. Acesse: http://localhost:8080"
echo ""
echo "üåê Sistema ROSS dispon√≠vel em: http://localhost:8080"
